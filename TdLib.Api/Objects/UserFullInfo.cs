using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains full information about a user
        /// </summary>
        public partial class UserFullInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "userFullInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("personal_photo")]
            public ChatPhoto PersonalPhoto { get; set; }

            /// <summary>
            /// User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public ChatPhoto Photo { get; set; }

            /// <summary>
            /// User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown.
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("public_photo")]
            public ChatPhoto PublicPhoto { get; set; }

            /// <summary>
            /// Block list to which the user is added; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("block_list")]
            public BlockList BlockList { get; set; }

            /// <summary>
            /// True, if the user can be called
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_called")]
            public bool CanBeCalled { get; set; }

            /// <summary>
            /// True, if a video call can be created with the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("supports_video_calls")]
            public bool SupportsVideoCalls { get; set; }

            /// <summary>
            /// True, if the user can't be called due to their privacy settings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_private_calls")]
            public bool HasPrivateCalls { get; set; }

            /// <summary>
            /// True, if the user can't be linked in forwarded messages due to their privacy settings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_private_forwards")]
            public bool HasPrivateForwards { get; set; }

            /// <summary>
            /// True, if voice and video notes can't be sent or forwarded to the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_restricted_voice_and_video_note_messages")]
            public bool HasRestrictedVoiceAndVideoNoteMessages { get; set; }

            /// <summary>
            /// True, if the user has posted to profile stories
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_posted_to_profile_stories")]
            public bool HasPostedToProfileStories { get; set; }

            /// <summary>
            /// True, if the user always enabled sponsored messages; known only for the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_sponsored_messages_enabled")]
            public bool HasSponsoredMessagesEnabled { get; set; }

            /// <summary>
            /// True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("need_phone_number_privacy_exception")]
            public bool NeedPhoneNumberPrivacyException { get; set; }

            /// <summary>
            /// True, if the user set chat background for both chat users and it wasn't reverted yet
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("set_chat_background")]
            public bool SetChatBackground { get; set; }

            /// <summary>
            /// A short user bio; may be null for bots
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bio")]
            public FormattedText Bio { get; set; }

            /// <summary>
            /// Birthdate of the user; may be null if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("birthdate")]
            public Birthdate Birthdate { get; set; }

            /// <summary>
            /// Identifier of the personal chat of the user; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("personal_chat_id")]
            public long PersonalChatId { get; set; }

            /// <summary>
            /// Number of saved to profile gifts for other users or the total number of received gifts for the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("gift_count")]
            public int GiftCount { get; set; }

            /// <summary>
            /// Number of group chats where both the other user and the current user are a member; 0 for the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_in_common_count")]
            public int GroupInCommonCount { get; set; }

            /// <summary>
            /// Information about verification status of the user provided by a bot; may be null if none or unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bot_verification")]
            public BotVerification BotVerification { get; set; }

            /// <summary>
            /// Information about business settings for Telegram Business accounts; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("business_info")]
            public BusinessInfo BusinessInfo { get; set; }

            /// <summary>
            /// For bots, information about the bot; may be null if the user isn't a bot
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bot_info")]
            public BotInfo BotInfo { get; set; }
        }
    }
}
// REUSE-IgnoreEnd