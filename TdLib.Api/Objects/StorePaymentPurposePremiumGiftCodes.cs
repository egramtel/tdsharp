using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class StorePaymentPurpose : Object
        {
            /// <summary>
            /// The user creating Telegram Premium gift codes for other users
            /// </summary>
            public class StorePaymentPurposePremiumGiftCodes : StorePaymentPurpose
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "storePaymentPurposePremiumGiftCodes";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Identifier of the supergroup or channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user; 0 if none
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("boosted_chat_id")]
                public long BoostedChatId { get; set; }

                /// <summary>
                /// ISO 4217 currency code of the payment currency
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("currency")]
                public string Currency { get; set; }

                /// <summary>
                /// Paid amount, in the smallest units of the currency
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("amount")]
                public long Amount { get; set; }

                /// <summary>
                /// Identifiers of the users which can activate the gift codes
                /// </summary>
                [JsonProperty("user_ids", ItemConverterType = typeof(Converter))]
                public long[] UserIds { get; set; }

                /// <summary>
                /// Text to show along with the gift codes; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("text")]
                public FormattedText Text { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd