using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a video file
        /// </summary>
        public partial class Video : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "video";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Duration of the video, in seconds; as defined by the sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("duration")]
            public int Duration { get; set; }

            /// <summary>
            /// Video width; as defined by the sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("width")]
            public int Width { get; set; }

            /// <summary>
            /// Video height; as defined by the sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("height")]
            public int Height { get; set; }

            /// <summary>
            /// Original name of the file; as defined by the sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_name")]
            public string FileName { get; set; }

            /// <summary>
            /// MIME type of the file; as defined by the sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("mime_type")]
            public string MimeType { get; set; }

            /// <summary>
            /// True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_stickers")]
            public bool HasStickers { get; set; }

            /// <summary>
            /// True, if the video is expected to be streamed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("supports_streaming")]
            public bool SupportsStreaming { get; set; }

            /// <summary>
            /// Video minithumbnail; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("minithumbnail")]
            public Minithumbnail Minithumbnail { get; set; }

            /// <summary>
            /// Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("thumbnail")]
            public Thumbnail Thumbnail { get; set; }

            /// <summary>
            /// File containing the video
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("video")]
            public File Video_ { get; set; }
        }
    }
}
// REUSE-IgnoreEnd