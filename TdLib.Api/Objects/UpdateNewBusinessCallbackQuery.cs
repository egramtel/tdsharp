using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class Update : Object
        {
            /// <summary>
            /// A new incoming callback query from a business message; for bots only
            /// </summary>
            public class UpdateNewBusinessCallbackQuery : Update
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "updateNewBusinessCallbackQuery";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Unique query identifier
                /// </summary>
                [JsonConverter(typeof(Converter.Int64))]
                [JsonProperty("id")]
                public long Id { get; set; }

                /// <summary>
                /// Identifier of the user who sent the query
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("sender_user_id")]
                public long SenderUserId { get; set; }

                /// <summary>
                /// Unique identifier of the business connection
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("connection_id")]
                public string ConnectionId { get; set; }

                /// <summary>
                /// The message from the business account from which the query originated
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("message")]
                public BusinessMessage Message { get; set; }

                /// <summary>
                /// An identifier uniquely corresponding to the chat a message was sent to
                /// </summary>
                [JsonConverter(typeof(Converter.Int64))]
                [JsonProperty("chat_instance")]
                public long ChatInstance { get; set; }

                /// <summary>
                /// Query payload
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("payload")]
                public CallbackQueryPayload Payload { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd