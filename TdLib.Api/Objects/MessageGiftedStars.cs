using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class MessageContent : Object
        {
            /// <summary>
            /// Telegram Stars were gifted to a user
            /// </summary>
            public class MessageGiftedStars : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageGiftedStars";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// The identifier of a user that gifted Telegram Stars; 0 if the gift was anonymous or is outgoing
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("gifter_user_id")]
                public long GifterUserId { get; set; }

                /// <summary>
                /// The identifier of a user that received Telegram Stars; 0 if the gift is incoming
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("receiver_user_id")]
                public long ReceiverUserId { get; set; }

                /// <summary>
                /// Currency for the paid amount
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("currency")]
                public string Currency { get; set; }

                /// <summary>
                /// The paid amount, in the smallest units of the currency
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("amount")]
                public long Amount { get; set; }

                /// <summary>
                /// Cryptocurrency used to pay for the gift; may be empty if none
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("cryptocurrency")]
                public string Cryptocurrency { get; set; }

                /// <summary>
                /// The paid amount, in the smallest units of the cryptocurrency; 0 if none
                /// </summary>
                [JsonConverter(typeof(Converter.Int64))]
                [JsonProperty("cryptocurrency_amount")]
                public long CryptocurrencyAmount { get; set; }

                /// <summary>
                /// Number of Telegram Stars that were gifted
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("star_count")]
                public long StarCount { get; set; }

                /// <summary>
                /// Identifier of the transaction for Telegram Stars purchase; for receiver only
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("transaction_id")]
                public string TransactionId { get; set; }

                /// <summary>
                /// A sticker to be shown in the message; may be null if unknown
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("sticker")]
                public Sticker Sticker { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd