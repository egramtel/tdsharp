using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about verification status of a chat or a user
        /// </summary>
        public partial class VerificationStatus : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "verificationStatus";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// True, if the chat or the user is verified by Telegram
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_verified")]
            public bool IsVerified { get; set; }

            /// <summary>
            /// True, if the chat or the user is marked as scam by Telegram
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_scam")]
            public bool IsScam { get; set; }

            /// <summary>
            /// True, if the chat or the user is marked as fake by Telegram
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_fake")]
            public bool IsFake { get; set; }

            /// <summary>
            /// Identifier of the custom emoji to be shown as verification sign provided by a bot for the user; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("bot_verification_icon_custom_emoji_id")]
            public long BotVerificationIconCustomEmojiId { get; set; }
        }
    }
}
// REUSE-IgnoreEnd