using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a video file sent in a story
        /// </summary>
        public partial class StoryVideo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "storyVideo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Duration of the video, in seconds
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("duration")]
            public double? Duration { get; set; }

            /// <summary>
            /// Video width
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("width")]
            public int Width { get; set; }

            /// <summary>
            /// Video height
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("height")]
            public int Height { get; set; }

            /// <summary>
            /// True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_stickers")]
            public bool HasStickers { get; set; }

            /// <summary>
            /// True, if the video has no sound
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_animation")]
            public bool IsAnimation { get; set; }

            /// <summary>
            /// Video minithumbnail; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("minithumbnail")]
            public Minithumbnail Minithumbnail { get; set; }

            /// <summary>
            /// Video thumbnail in JPEG or MPEG4 format; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("thumbnail")]
            public Thumbnail Thumbnail { get; set; }

            /// <summary>
            /// Size of file prefix, which is expected to be preloaded, in bytes
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("preload_prefix_size")]
            public int PreloadPrefixSize { get; set; }

            /// <summary>
            /// Timestamp of the frame used as video thumbnail
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("cover_frame_timestamp")]
            public double? CoverFrameTimestamp { get; set; }

            /// <summary>
            /// File containing the video
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("video")]
            public File Video { get; set; }
        }
    }
}
// REUSE-IgnoreEnd