using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a user
        /// </summary>
        public partial class User : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "user";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// User identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public long Id { get; set; }

            /// <summary>
            /// First name of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("first_name")]
            public string FirstName { get; set; }

            /// <summary>
            /// Last name of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_name")]
            public string LastName { get; set; }

            /// <summary>
            /// Usernames of the user; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("usernames")]
            public Usernames Usernames { get; set; }

            /// <summary>
            /// Phone number of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("phone_number")]
            public string PhoneNumber { get; set; }

            /// <summary>
            /// Current online status of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("status")]
            public UserStatus Status { get; set; }

            /// <summary>
            /// Profile photo of the user; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("profile_photo")]
            public ProfilePhoto ProfilePhoto { get; set; }

            /// <summary>
            /// Identifier of the accent color for name, and backgrounds of profile photo, reply header, and link preview
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("accent_color_id")]
            public int AccentColorId { get; set; }

            /// <summary>
            /// Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("background_custom_emoji_id")]
            public long BackgroundCustomEmojiId { get; set; }

            /// <summary>
            /// Identifier of the accent color for the user's profile; -1 if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("profile_accent_color_id")]
            public int ProfileAccentColorId { get; set; }

            /// <summary>
            /// Identifier of a custom emoji to be shown on the background of the user's profile; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("profile_background_custom_emoji_id")]
            public long ProfileBackgroundCustomEmojiId { get; set; }

            /// <summary>
            /// Emoji status to be shown instead of the default Telegram Premium badge; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("emoji_status")]
            public EmojiStatus EmojiStatus { get; set; }

            /// <summary>
            /// The user is a contact of the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_contact")]
            public bool IsContact { get; set; }

            /// <summary>
            /// The user is a contact of the current user and the current user is a contact of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_mutual_contact")]
            public bool IsMutualContact { get; set; }

            /// <summary>
            /// The user is a close friend of the current user; implies that the user is a contact
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_close_friend")]
            public bool IsCloseFriend { get; set; }

            /// <summary>
            /// Information about verification status of the user; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("verification_status")]
            public VerificationStatus VerificationStatus { get; set; }

            /// <summary>
            /// True, if the user is a Telegram Premium user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_premium")]
            public bool IsPremium { get; set; }

            /// <summary>
            /// True, if the user is Telegram support account
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_support")]
            public bool IsSupport { get; set; }

            /// <summary>
            /// If non-empty, it contains a human-readable description of the reason why access to this user must be restricted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("restriction_reason")]
            public string RestrictionReason { get; set; }

            /// <summary>
            /// True, if the user has non-expired stories available to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_active_stories")]
            public bool HasActiveStories { get; set; }

            /// <summary>
            /// True, if the user has unread non-expired stories available to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_unread_active_stories")]
            public bool HasUnreadActiveStories { get; set; }

            /// <summary>
            /// True, if the user may restrict new chats with non-contacts. Use canSendMessageToUser to check whether the current user can message the user or try to create a chat with them
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("restricts_new_chats")]
            public bool RestrictsNewChats { get; set; }

            /// <summary>
            /// If false, the user is inaccessible, and the only information known about the user is inside this class. Identifier of the user can't be passed to any method
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("have_access")]
            public bool HaveAccess { get; set; }

            /// <summary>
            /// Type of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public UserType Type { get; set; }

            /// <summary>
            /// IETF language tag of the user's language; only available to bots
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("language_code")]
            public string LanguageCode { get; set; }

            /// <summary>
            /// True, if the user added the current bot to attachment menu; only available to bots
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("added_to_attachment_menu")]
            public bool AddedToAttachmentMenu { get; set; }
        }
    }
}
// REUSE-IgnoreEnd