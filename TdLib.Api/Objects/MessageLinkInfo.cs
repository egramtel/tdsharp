using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about a link to a message or a forum topic in a chat
        /// </summary>
        public partial class MessageLinkInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "messageLinkInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// True, if the link is a public link for a message or a forum topic in a chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_public")]
            public bool IsPublic { get; set; }

            /// <summary>
            /// If found, identifier of the chat to which the link points, 0 otherwise
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// If found, identifier of the message thread in which to open the message, or a forum topic to open if the message is missing
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_thread_id")]
            public long MessageThreadId { get; set; }

            /// <summary>
            /// If found, the linked message; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message")]
            public Message Message { get; set; }

            /// <summary>
            /// Timestamp from which the video/audio/video note/voice note/story playing must start, in seconds; 0 if not specified. The media can be in the message content or in its link preview
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("media_timestamp")]
            public int MediaTimestamp { get; set; }

            /// <summary>
            /// True, if the whole media album to which the message belongs is linked
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("for_album")]
            public bool ForAlbum { get; set; }
        }
    }
}
// REUSE-IgnoreEnd