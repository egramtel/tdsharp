using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes parameters of verification that is provided by a bot
        /// </summary>
        public partial class BotVerificationParameters : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "botVerificationParameters";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the custom emoji that is used as the verification sign
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("icon_custom_emoji_id")]
            public long IconCustomEmojiId { get; set; }

            /// <summary>
            /// Name of the organization that provides verification
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("organization_name")]
            public string OrganizationName { get; set; }

            /// <summary>
            /// Default custom description of verification reason to be used as placeholder in setMessageSenderBotVerification; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_custom_description")]
            public FormattedText DefaultCustomDescription { get; set; }

            /// <summary>
            /// True, if the bot is allowed to provide custom description for verified entities
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_set_custom_description")]
            public bool CanSetCustomDescription { get; set; }
        }
    }
}
// REUSE-IgnoreEnd