using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class InternalLinkType : Object
        {
            /// <summary>
            /// The link is a link to a Telegram bot, which is expected to be added to a group chat. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups,
            /// ask the current user to select a basic group or a supergroup chat to add the bot to, taking into account that bots can be added to a public supergroup only by administrators of the supergroup.
            /// If administrator rights are provided by the link, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator,
            /// check that the current user can edit its administrator rights, combine received rights with the requested administrator rights, show confirmation box to the user,
            /// and call setChatMemberStatus with the chosen chat and confirmed administrator rights. Before call to setChatMemberStatus it may be required to upgrade the chosen basic group chat to a supergroup chat.
            /// Then, if start_parameter isn't empty, call sendBotStartMessage with the given start parameter and the chosen chat; otherwise, just send /start message with bot's username added to the chat
            /// </summary>
            public class InternalLinkTypeBotStartInGroup : InternalLinkType
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "internalLinkTypeBotStartInGroup";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Username of the bot
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("bot_username")]
                public string BotUsername { get; set; }

                /// <summary>
                /// The parameter to be passed to sendBotStartMessage
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("start_parameter")]
                public string StartParameter { get; set; }

                /// <summary>
                /// Expected administrator rights for the bot; may be null
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("administrator_rights")]
                public ChatAdministratorRights AdministratorRights { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd