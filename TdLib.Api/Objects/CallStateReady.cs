using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class CallState : Object
        {
            /// <summary>
            /// The call is ready to use
            /// </summary>
            public class CallStateReady : CallState
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "callStateReady";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Call protocols supported by the other call participant
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("protocol")]
                public CallProtocol Protocol { get; set; }

                /// <summary>
                /// List of available call servers
                /// </summary>
                [JsonProperty("servers", ItemConverterType = typeof(Converter))]
                public CallServer[] Servers { get; set; }

                /// <summary>
                /// A JSON-encoded call config
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("config")]
                public string Config { get; set; }

                /// <summary>
                /// Call encryption key
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("encryption_key")]
                public byte[] EncryptionKey { get; set; }

                /// <summary>
                /// Encryption key fingerprint represented as 4 emoji
                /// </summary>
                [JsonProperty("emojis", ItemConverterType = typeof(Converter))]
                public string[] Emojis { get; set; }

                /// <summary>
                /// True, if peer-to-peer connection is allowed by users privacy settings
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("allow_p2p")]
                public bool AllowP2p { get; set; }

                /// <summary>
                /// Custom JSON-encoded call parameters to be passed to tgcalls
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("custom_parameters")]
                public string CustomParameters { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd