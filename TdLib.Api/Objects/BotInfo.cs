using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about a bot
        /// </summary>
        public partial class BotInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "botInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The text that is shown on the bot's profile page and is sent together with the link when users share the bot
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("short_description")]
            public string ShortDescription { get; set; }

            /// <summary>
            /// 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("description")]
            public string Description { get; set; }

            /// <summary>
            /// Photo shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public Photo Photo { get; set; }

            /// <summary>
            /// Animation shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("animation")]
            public Animation Animation { get; set; }

            /// <summary>
            /// Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("menu_button")]
            public BotMenuButton MenuButton { get; set; }

            /// <summary>
            /// List of the bot commands
            /// </summary>
            [JsonProperty("commands", ItemConverterType = typeof(Converter))]
            public BotCommand[] Commands { get; set; }

            /// <summary>
            /// The HTTP link to the privacy policy of the bot. If empty, then /privacy command must be used if supported by the bot. If the command isn't supported, then https://telegram.org/privacy-tpa must be opened
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("privacy_policy_url")]
            public string PrivacyPolicyUrl { get; set; }

            /// <summary>
            /// Default administrator rights for adding the bot to basic group and supergroup chats; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_group_administrator_rights")]
            public ChatAdministratorRights DefaultGroupAdministratorRights { get; set; }

            /// <summary>
            /// Default administrator rights for adding the bot to channels; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_channel_administrator_rights")]
            public ChatAdministratorRights DefaultChannelAdministratorRights { get; set; }

            /// <summary>
            /// Information about the affiliate program of the bot; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("affiliate_program")]
            public AffiliateProgramInfo AffiliateProgram { get; set; }

            /// <summary>
            /// Default light background color for bot Web Apps; -1 if not specified
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("web_app_background_light_color")]
            public int WebAppBackgroundLightColor { get; set; }

            /// <summary>
            /// Default dark background color for bot Web Apps; -1 if not specified
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("web_app_background_dark_color")]
            public int WebAppBackgroundDarkColor { get; set; }

            /// <summary>
            /// Default light header color for bot Web Apps; -1 if not specified
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("web_app_header_light_color")]
            public int WebAppHeaderLightColor { get; set; }

            /// <summary>
            /// Default dark header color for bot Web Apps; -1 if not specified
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("web_app_header_dark_color")]
            public int WebAppHeaderDarkColor { get; set; }

            /// <summary>
            /// Parameters of the verification that can be provided by the bot; may be null if none or the current user isn't the owner of the bot
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("verification_parameters")]
            public BotVerificationParameters VerificationParameters { get; set; }

            /// <summary>
            /// True, if the bot's revenue statistics are available to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_get_revenue_statistics")]
            public bool CanGetRevenueStatistics { get; set; }

            /// <summary>
            /// True, if the bot can manage emoji status of the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_manage_emoji_status")]
            public bool CanManageEmojiStatus { get; set; }

            /// <summary>
            /// True, if the bot has media previews
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_media_previews")]
            public bool HasMediaPreviews { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot commands; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_commands_link")]
            public InternalLinkType EditCommandsLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot description; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_description_link")]
            public InternalLinkType EditDescriptionLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit the photo or animation shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_description_media_link")]
            public InternalLinkType EditDescriptionMediaLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot settings; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_settings_link")]
            public InternalLinkType EditSettingsLink { get; set; }
        }
    }
}
// REUSE-IgnoreEnd