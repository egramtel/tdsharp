using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup:
        /// only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos.
        /// Unlike supergroups, channels can have an unlimited number of subscribers
        /// </summary>
        public partial class Supergroup : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "supergroup";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Supergroup or channel identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public long Id { get; set; }

            /// <summary>
            /// Usernames of the supergroup or channel; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("usernames")]
            public Usernames Usernames { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("date")]
            public int Date { get; set; }

            /// <summary>
            /// Status of the current user in the supergroup or channel; custom title will always be empty
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("status")]
            public ChatMemberStatus Status { get; set; }

            /// <summary>
            /// Number of members in the supergroup or channel; 0 if unknown. Currently, it is guaranteed to be known only if the supergroup or channel was received through
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("member_count")]
            public int MemberCount { get; set; }

            /// <summary>
            /// Approximate boost level for the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("boost_level")]
            public int BoostLevel { get; set; }

            /// <summary>
            /// True, if the channel has a discussion group, or the supergroup is the designated discussion group for a channel
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_linked_chat")]
            public bool HasLinkedChat { get; set; }

            /// <summary>
            /// True, if the supergroup is connected to a location, i.e. the supergroup is a location-based supergroup
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_location")]
            public bool HasLocation { get; set; }

            /// <summary>
            /// True, if messages sent to the channel contains name of the sender. This field is only applicable to channels
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sign_messages")]
            public bool SignMessages { get; set; }

            /// <summary>
            /// True, if messages sent to the channel have information about the sender user. This field is only applicable to channels
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("show_message_sender")]
            public bool ShowMessageSender { get; set; }

            /// <summary>
            /// True, if users need to join the supergroup before they can send messages. Always true for channels and non-discussion supergroups
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("join_to_send_messages")]
            public bool JoinToSendMessages { get; set; }

            /// <summary>
            /// True, if all users directly joining the supergroup need to be approved by supergroup administrators. Always false for channels and supergroups without username, location, or a linked chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("join_by_request")]
            public bool JoinByRequest { get; set; }

            /// <summary>
            /// True, if the slow mode is enabled in the supergroup
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_slow_mode_enabled")]
            public bool IsSlowModeEnabled { get; set; }

            /// <summary>
            /// True, if the supergroup is a channel
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_channel")]
            public bool IsChannel { get; set; }

            /// <summary>
            /// True, if the supergroup is a broadcast group, i.e. only administrators can send messages and there is no limit on the number of members
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_broadcast_group")]
            public bool IsBroadcastGroup { get; set; }

            /// <summary>
            /// True, if the supergroup is a forum with topics
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_forum")]
            public bool IsForum { get; set; }

            /// <summary>
            /// Information about verification status of the supergroup or channel; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("verification_status")]
            public VerificationStatus VerificationStatus { get; set; }

            /// <summary>
            /// True, if content of media messages in the supergroup or channel chat must be hidden with 18+ spoiler
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_sensitive_content")]
            public bool HasSensitiveContent { get; set; }

            /// <summary>
            /// If non-empty, contains a human-readable description of the reason why access to this supergroup or channel must be restricted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("restriction_reason")]
            public string RestrictionReason { get; set; }

            /// <summary>
            /// True, if the supergroup or channel has non-expired stories available to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_active_stories")]
            public bool HasActiveStories { get; set; }

            /// <summary>
            /// True, if the supergroup or channel has unread non-expired stories available to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_unread_active_stories")]
            public bool HasUnreadActiveStories { get; set; }
        }
    }
}
// REUSE-IgnoreEnd