using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class MessageContent : Object
        {
            /// <summary>
            /// A message with an invoice from a bot. Use getInternalLink with internalLinkTypeBotStart to share the invoice
            /// </summary>
            public class MessageInvoice : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageInvoice";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Information about the product
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("product_info")]
                public ProductInfo ProductInfo { get; set; }

                /// <summary>
                /// Currency for the product price
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("currency")]
                public string Currency { get; set; }

                /// <summary>
                /// Product total price in the smallest units of the currency
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("total_amount")]
                public long TotalAmount { get; set; }

                /// <summary>
                /// Unique invoice bot start_parameter to be passed to getInternalLink
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("start_parameter")]
                public string StartParameter { get; set; }

                /// <summary>
                /// True, if the invoice is a test invoice
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_test")]
                public bool IsTest { get; set; }

                /// <summary>
                /// True, if the shipping address must be specified
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("need_shipping_address")]
                public bool NeedShippingAddress { get; set; }

                /// <summary>
                /// The identifier of the message with the receipt, after the product has been purchased
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("receipt_message_id")]
                public long ReceiptMessageId { get; set; }

                /// <summary>
                /// Extended media attached to the invoice; may be null if none
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("paid_media")]
                public PaidMedia PaidMedia { get; set; }

                /// <summary>
                /// Extended media caption; may be null if none
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("paid_media_caption")]
                public FormattedText PaidMediaCaption { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd