using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class InputStoryContent : Object
        {
            /// <summary>
            /// A video story
            /// </summary>
            public class InputStoryContentVideo : InputStoryContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "inputStoryContentVideo";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Video to be sent. The video size must be 720x1280. The video must be streamable and stored in MPEG4 format, after encoding with H.265 codec and key frames added each second
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("video")]
                public InputFile Video { get; set; }

                /// <summary>
                /// File identifiers of the stickers added to the video, if applicable
                /// </summary>
                [JsonProperty("added_sticker_file_ids", ItemConverterType = typeof(Converter))]
                public int[] AddedStickerFileIds { get; set; }

                /// <summary>
                /// Precise duration of the video, in seconds; 0-60
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("duration")]
                public double? Duration { get; set; }

                /// <summary>
                /// Timestamp of the frame, which will be used as video thumbnail
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("cover_frame_timestamp")]
                public double? CoverFrameTimestamp { get; set; }

                /// <summary>
                /// True, if the video has no sound
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_animation")]
                public bool IsAnimation { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd