using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a link preview
        /// </summary>
        public partial class LinkPreview : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "linkPreview";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Original URL of the link
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("url")]
            public string Url { get; set; }

            /// <summary>
            /// URL to display
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("display_url")]
            public string DisplayUrl { get; set; }

            /// <summary>
            /// Short name of the site (e.g., Google Docs, App Store)
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("site_name")]
            public string SiteName { get; set; }

            /// <summary>
            /// Title of the content
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("title")]
            public string Title { get; set; }

            /// <summary>
            /// 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("description")]
            public FormattedText Description { get; set; }

            /// <summary>
            /// Author of the content
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("author")]
            public string Author { get; set; }

            /// <summary>
            /// Type of the link preview
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public LinkPreviewType Type { get; set; }

            /// <summary>
            /// True, if size of media in the preview can be changed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_large_media")]
            public bool HasLargeMedia { get; set; }

            /// <summary>
            /// True, if large media preview must be shown; otherwise, the media preview must be shown small and only the first frame must be shown for videos
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("show_large_media")]
            public bool ShowLargeMedia { get; set; }

            /// <summary>
            /// True, if media must be shown above link preview description; otherwise, the media must be shown below the description
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("show_media_above_description")]
            public bool ShowMediaAboveDescription { get; set; }

            /// <summary>
            /// True, if there is no need to show an ordinary open URL confirmation, when opening the URL from the preview, because the URL is shown in the message text in clear
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("skip_confirmation")]
            public bool SkipConfirmation { get; set; }

            /// <summary>
            /// True, if the link preview must be shown above message text; otherwise, the link preview must be shown below the message text
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("show_above_text")]
            public bool ShowAboveText { get; set; }

            /// <summary>
            /// Version of instant view (currently, can be 1 or 2) for the web page; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("instant_view_version")]
            public int InstantViewVersion { get; set; }
        }
    }
}
// REUSE-IgnoreEnd