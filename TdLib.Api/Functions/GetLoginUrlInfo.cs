using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button
        /// </summary>
        public class GetLoginUrlInfo : Function<LoginUrlInfo>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getLoginUrlInfo";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier of the message with the button
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Message identifier of the message with the button. The message must not be scheduled
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Button identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("button_id")]
            public long ButtonId { get; set; }
        }

        /// <summary>
        /// Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button
        /// </summary>
        public static Task<LoginUrlInfo> GetLoginUrlInfoAsync(
            this Client client, long chatId = default, long messageId = default, long buttonId = default)
        {
            return client.ExecuteAsync(new GetLoginUrlInfo
            {
                ChatId = chatId, MessageId = messageId, ButtonId = buttonId
            });
        }
    }
}
// REUSE-IgnoreEnd