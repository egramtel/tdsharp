using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns reactions added for a message, along with their sender
        /// </summary>
        public class GetMessageAddedReactions : Function<AddedReactions>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getMessageAddedReactions";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat to which the message belongs
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message. Use message.interaction_info.reactions.can_get_added_reactions to check whether added reactions can be received for the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Type of the reactions to return; pass null to return all added reactions; reactionTypePaid isn't supported
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reaction_type")]
            public ReactionType ReactionType { get; set; }

            /// <summary>
            /// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public string Offset { get; set; }

            /// <summary>
            /// The maximum number of reactions to be returned; must be positive and can't be greater than 100
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Returns reactions added for a message, along with their sender
        /// </summary>
        public static Task<AddedReactions> GetMessageAddedReactionsAsync(
            this Client client, long chatId = default, long messageId = default, ReactionType reactionType = default, string offset = default, int limit = default)
        {
            return client.ExecuteAsync(new GetMessageAddedReactions
            {
                ChatId = chatId, MessageId = messageId, ReactionType = reactionType, Offset = offset, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd