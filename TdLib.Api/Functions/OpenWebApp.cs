using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Informs TDLib that a Web App is being opened from the attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button.
        /// For each bot, a confirmation alert about data sent to the bot must be shown once
        /// </summary>
        public class OpenWebApp : Function<WebAppInfo>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "openWebApp";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat in which the Web App is opened. The Web App can't be opened in secret chats
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the bot, providing the Web App. If the bot is restricted for the current user, then show an error instead of calling the method
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bot_user_id")]
            public long BotUserId { get; set; }

            /// <summary>
            /// The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an empty string otherwise
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("url")]
            public string Url { get; set; }

            /// <summary>
            /// If not 0, the message thread identifier in which the message will be sent
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_thread_id")]
            public long MessageThreadId { get; set; }

            /// <summary>
            /// Information about the message or story to be replied in the message sent by the Web App; pass null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_to")]
            public InputMessageReplyTo ReplyTo { get; set; }

            /// <summary>
            /// Parameters to use to open the Web App
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("parameters")]
            public WebAppOpenParameters Parameters { get; set; }
        }

        /// <summary>
        /// Informs TDLib that a Web App is being opened from the attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button.
        /// For each bot, a confirmation alert about data sent to the bot must be shown once
        /// </summary>
        public static Task<WebAppInfo> OpenWebAppAsync(
            this Client client, long chatId = default, long botUserId = default, string url = default, long messageThreadId = default, InputMessageReplyTo replyTo = default, WebAppOpenParameters parameters = default)
        {
            return client.ExecuteAsync(new OpenWebApp
            {
                ChatId = chatId, BotUserId = botUserId, Url = url, MessageThreadId = messageThreadId, ReplyTo = replyTo, Parameters = parameters
            });
        }
    }
}
// REUSE-IgnoreEnd