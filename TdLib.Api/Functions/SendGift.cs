using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends a gift to another user or channel chat. May return an error with a message "STARGIFT_USAGE_LIMITED" if the gift was sold out
        /// </summary>
        public class SendGift : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "sendGift";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the gift to send
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("gift_id")]
            public long GiftId { get; set; }

            /// <summary>
            /// Identifier of the user or the channel chat that will receive the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("owner_id")]
            public MessageSender OwnerId { get; set; }

            /// <summary>
            /// Text to show along with the gift; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public FormattedText Text { get; set; }

            /// <summary>
            /// Pass true to show gift text and sender only to the gift receiver; otherwise, everyone will be able to see them
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_private")]
            public bool IsPrivate { get; set; }

            /// <summary>
            /// Pass true to additionally pay for the gift upgrade and allow the receiver to upgrade it for free
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("pay_for_upgrade")]
            public bool PayForUpgrade { get; set; }
        }

        /// <summary>
        /// Sends a gift to another user or channel chat. May return an error with a message "STARGIFT_USAGE_LIMITED" if the gift was sold out
        /// </summary>
        public static Task<Ok> SendGiftAsync(
            this Client client, long giftId = default, MessageSender ownerId = default, FormattedText text = default, bool isPrivate = default, bool payForUpgrade = default)
        {
            return client.ExecuteAsync(new SendGift
            {
                GiftId = giftId, OwnerId = ownerId, Text = text, IsPrivate = isPrivate, PayForUpgrade = payForUpgrade
            });
        }
    }
}
// REUSE-IgnoreEnd