using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location.
        /// Returns the edited message after the edit is completed on the server side
        /// </summary>
        public class EditMessageLiveLocation : Function<Message>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "editMessageLiveLocation";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The chat the message belongs to
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// The new message reply markup; pass null if none; for bots only
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_markup")]
            public ReplyMarkup ReplyMarkup { get; set; }

            /// <summary>
            /// New location content of the message; pass null to stop sharing the live location
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("location")]
            public Location Location { get; set; }

            /// <summary>
            /// New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever.
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("live_period")]
            public int LivePeriod { get; set; }

            /// <summary>
            /// The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("heading")]
            public int Heading { get; set; }

            /// <summary>
            /// The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("proximity_alert_radius")]
            public int ProximityAlertRadius { get; set; }
        }

        /// <summary>
        /// Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location.
        /// Returns the edited message after the edit is completed on the server side
        /// </summary>
        public static Task<Message> EditMessageLiveLocationAsync(
            this Client client, long chatId = default, long messageId = default, ReplyMarkup replyMarkup = default, Location location = default, int livePeriod = default, int heading = default, int proximityAlertRadius = default)
        {
            return client.ExecuteAsync(new EditMessageLiveLocation
            {
                ChatId = chatId, MessageId = messageId, ReplyMarkup = replyMarkup, Location = location, LivePeriod = livePeriod, Heading = heading, ProximityAlertRadius = proximityAlertRadius
            });
        }
    }
}
// REUSE-IgnoreEnd