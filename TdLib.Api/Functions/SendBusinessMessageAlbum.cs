using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends 2-10 messages grouped together into an album on behalf of a business account; for bots only. Currently, only audio, document, photo and video messages can be grouped into an album.
        /// Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages
        /// </summary>
        public class SendBusinessMessageAlbum : Function<BusinessMessages>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "sendBusinessMessageAlbum";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique identifier of business connection on behalf of which to send the request
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("business_connection_id")]
            public string BusinessConnectionId { get; set; }

            /// <summary>
            /// Target chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Information about the message to be replied; pass null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_to")]
            public InputMessageReplyTo ReplyTo { get; set; }

            /// <summary>
            /// Pass true to disable notification for the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("disable_notification")]
            public bool DisableNotification { get; set; }

            /// <summary>
            /// Pass true if the content of the message must be protected from forwarding and saving
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("protect_content")]
            public bool ProtectContent { get; set; }

            /// <summary>
            /// Identifier of the effect to apply to the message
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("effect_id")]
            public long EffectId { get; set; }

            /// <summary>
            /// Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media
            /// </summary>
            [JsonProperty("input_message_contents", ItemConverterType = typeof(Converter))]
            public InputMessageContent[] InputMessageContents { get; set; }
        }

        /// <summary>
        /// Sends 2-10 messages grouped together into an album on behalf of a business account; for bots only. Currently, only audio, document, photo and video messages can be grouped into an album.
        /// Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages
        /// </summary>
        public static Task<BusinessMessages> SendBusinessMessageAlbumAsync(
            this Client client, string businessConnectionId = default, long chatId = default, InputMessageReplyTo replyTo = default, bool disableNotification = default, bool protectContent = default, long effectId = default, InputMessageContent[] inputMessageContents = default)
        {
            return client.ExecuteAsync(new SendBusinessMessageAlbum
            {
                BusinessConnectionId = businessConnectionId, ChatId = chatId, ReplyTo = replyTo, DisableNotification = disableNotification, ProtectContent = protectContent, EffectId = effectId, InputMessageContents = inputMessageContents
            });
        }
    }
}
// REUSE-IgnoreEnd