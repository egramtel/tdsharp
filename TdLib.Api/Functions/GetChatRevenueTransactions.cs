using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns the list of revenue transactions for a chat. Currently, this method can be used only
        /// for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true
        /// </summary>
        public class GetChatRevenueTransactions : Function<ChatRevenueTransactions>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChatRevenueTransactions";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Number of transactions to skip
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public int Offset { get; set; }

            /// <summary>
            /// The maximum number of transactions to be returned; up to 200
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Returns the list of revenue transactions for a chat. Currently, this method can be used only
        /// for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true
        /// </summary>
        public static Task<ChatRevenueTransactions> GetChatRevenueTransactionsAsync(
            this Client client, long chatId = default, int offset = default, int limit = default)
        {
            return client.ExecuteAsync(new GetChatRevenueTransactions
            {
                ChatId = chatId, Offset = offset, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd