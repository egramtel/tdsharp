using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Creates a new call
        /// </summary>
        public class CreateCall : Function<CallId>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "createCall";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the user to be called
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_id")]
            public long UserId { get; set; }

            /// <summary>
            /// The call protocols supported by the application
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("protocol")]
            public CallProtocol Protocol { get; set; }

            /// <summary>
            /// Pass true to create a video call
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_video")]
            public bool IsVideo { get; set; }

            /// <summary>
            /// Identifier of the group call to which the user will be added after exchanging private key via the call; pass 0 if none; currently, ignored
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }
        }

        /// <summary>
        /// Creates a new call
        /// </summary>
        public static Task<CallId> CreateCallAsync(
            this Client client, long userId = default, CallProtocol protocol = default, bool isVideo = default, int groupCallId = default)
        {
            return client.ExecuteAsync(new CreateCall
            {
                UserId = userId, Protocol = protocol, IsVideo = isVideo, GroupCallId = groupCallId
            });
        }
    }
}
// REUSE-IgnoreEnd