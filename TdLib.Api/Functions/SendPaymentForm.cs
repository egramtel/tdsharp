using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends a filled-out payment form to the bot for final verification
        /// </summary>
        public class SendPaymentForm : Function<PaymentResult>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "sendPaymentForm";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The invoice
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("input_invoice")]
            public InputInvoice InputInvoice { get; set; }

            /// <summary>
            /// Payment form identifier returned by getPaymentForm
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("payment_form_id")]
            public long PaymentFormId { get; set; }

            /// <summary>
            /// Identifier returned by validateOrderInfo, or an empty string
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("order_info_id")]
            public string OrderInfoId { get; set; }

            /// <summary>
            /// Identifier of a chosen shipping option, if applicable
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("shipping_option_id")]
            public string ShippingOptionId { get; set; }

            /// <summary>
            /// The credentials chosen by user for payment; pass null for a payment in Telegram Stars
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("credentials")]
            public InputCredentials Credentials { get; set; }

            /// <summary>
            /// Chosen by the user amount of tip in the smallest units of the currency
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("tip_amount")]
            public long TipAmount { get; set; }
        }

        /// <summary>
        /// Sends a filled-out payment form to the bot for final verification
        /// </summary>
        public static Task<PaymentResult> SendPaymentFormAsync(
            this Client client, InputInvoice inputInvoice = default, long paymentFormId = default, string orderInfoId = default, string shippingOptionId = default, InputCredentials credentials = default, long tipAmount = default)
        {
            return client.ExecuteAsync(new SendPaymentForm
            {
                InputInvoice = inputInvoice, PaymentFormId = paymentFormId, OrderInfoId = orderInfoId, ShippingOptionId = shippingOptionId, Credentials = credentials, TipAmount = tipAmount
            });
        }
    }
}
// REUSE-IgnoreEnd