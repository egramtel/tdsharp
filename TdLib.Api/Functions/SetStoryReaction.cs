using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes chosen reaction on a story that has already been sent
        /// </summary>
        public class SetStoryReaction : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setStoryReaction";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The identifier of the sender of the story
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("story_sender_chat_id")]
            public long StorySenderChatId { get; set; }

            /// <summary>
            /// The identifier of the story
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("story_id")]
            public int StoryId { get; set; }

            /// <summary>
            /// Type of the reaction to set; pass null to remove the reaction. Custom emoji reactions can be used only by Telegram Premium users. Paid reactions can't be set
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reaction_type")]
            public ReactionType ReactionType { get; set; }

            /// <summary>
            /// Pass true if the reaction needs to be added to recent reactions
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("update_recent_reactions")]
            public bool UpdateRecentReactions { get; set; }
        }

        /// <summary>
        /// Changes chosen reaction on a story that has already been sent
        /// </summary>
        public static Task<Ok> SetStoryReactionAsync(
            this Client client, long storySenderChatId = default, int storyId = default, ReactionType reactionType = default, bool updateRecentReactions = default)
        {
            return client.ExecuteAsync(new SetStoryReaction
            {
                StorySenderChatId = storySenderChatId, StoryId = storyId, ReactionType = reactionType, UpdateRecentReactions = updateRecentReactions
            });
        }
    }
}
// REUSE-IgnoreEnd