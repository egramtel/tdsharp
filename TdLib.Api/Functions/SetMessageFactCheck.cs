using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes the fact-check of a message. Can be only used if messageProperties.can_set_fact_check == true
        /// </summary>
        public class SetMessageFactCheck : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setMessageFactCheck";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The channel chat the message belongs to
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// New text of the fact-check; 0-getOption("fact_check_length_max") characters; pass null to remove it. Only Bold, Italic, and TextUrl entities with https://t.me/ links are supported
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public FormattedText Text { get; set; }
        }

        /// <summary>
        /// Changes the fact-check of a message. Can be only used if messageProperties.can_set_fact_check == true
        /// </summary>
        public static Task<Ok> SetMessageFactCheckAsync(
            this Client client, long chatId = default, long messageId = default, FormattedText text = default)
        {
            return client.ExecuteAsync(new SetMessageFactCheck
            {
                ChatId = chatId, MessageId = messageId, Text = text
            });
        }
    }
}
// REUSE-IgnoreEnd