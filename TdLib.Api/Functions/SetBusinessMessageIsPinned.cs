using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Pins or unpins a message sent on behalf of a business account; for bots only
        /// </summary>
        public class SetBusinessMessageIsPinned : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setBusinessMessageIsPinned";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique identifier of business connection on behalf of which the message was sent
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("business_connection_id")]
            public string BusinessConnectionId { get; set; }

            /// <summary>
            /// The chat the message belongs to
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Pass true to pin the message, pass false to unpin it
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_pinned")]
            public bool IsPinned { get; set; }
        }

        /// <summary>
        /// Pins or unpins a message sent on behalf of a business account; for bots only
        /// </summary>
        public static Task<Ok> SetBusinessMessageIsPinnedAsync(
            this Client client, string businessConnectionId = default, long chatId = default, long messageId = default, bool isPinned = default)
        {
            return client.ExecuteAsync(new SetBusinessMessageIsPinned
            {
                BusinessConnectionId = businessConnectionId, ChatId = chatId, MessageId = messageId, IsPinned = isPinned
            });
        }
    }
}
// REUSE-IgnoreEnd