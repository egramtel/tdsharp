using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns information about a message effect. Returns a 404 error if the effect is not found
        /// </summary>
        public class GetMessageEffect : Function<MessageEffect>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getMessageEffect";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique identifier of the effect
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("effect_id")]
            public long EffectId { get; set; }
        }

        /// <summary>
        /// Returns information about a message effect. Returns a 404 error if the effect is not found
        /// </summary>
        public static Task<MessageEffect> GetMessageEffectAsync(
            this Client client, long effectId = default)
        {
            return client.ExecuteAsync(new GetMessageEffect
            {
                EffectId = effectId
            });
        }
    }
}
// REUSE-IgnoreEnd